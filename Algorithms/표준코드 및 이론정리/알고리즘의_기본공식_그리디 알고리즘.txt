그리디 알고리즘 
현재 선택할 수 있는 경우의 수 중 가장 좋은 것을 고르는 것. 가장 큰수, 가장 작은수,가장 가까운것, 가장 먼것 등을 먼저 선택하는 것 
--------------------------
암기해야할 예제
--------------------------
예제: 활동 선택 문제
한 강의실에서 여러 개의 수업을 하려고 할 때 한 번에 가장 많은 수업을 할 수 있는 경우를 고르는 겁니다.

[번호,시작시간,종료시간]
activity = [[1,1,3], [2,2,5], [3,4,7], [4,1,8], [5,5,9], [6,8,10], [7,9,11], [8,11,14], [9,13,16]]

def activitySelection(act):
    result = []

    sortedAct = sorted(act, key=lambda x: x[2]) # 종료시간 기준 오름차순

    last = 0 # 마지막 종료시간을 0시로 지정
    for i in sortedAct: # 회의정보 목록에서 차례로 추출
        if last < i[1]: # 회의 시작시간이 이전의 종료시간보다 크면
            result.append(i) # 해당회의정보 저장
            last = i[2] # 해당회의의 종료시간을 마지막 회의 종료시간으로 저장. 다음 회의는 이 종료시간이후 시작시간을 가진 회의가 된다.

    print("선택된 Activity: ", result)
    result = list(map(lambda x: x[0], result))
    return result

print("선택된 Activity Number: ", activitySelection(activity))

--------------------------
암기해야할 예제
--------------------------
예제 - 동전 지불 
문제 : 지불해야 하는 값이 362원 일 때 1원 50원 100원 짜리 동전으로 동전의 수가 가장 적게 지불하시오. 
해결책 : "일단 큰 단위의 동전부터 적용"시켜본다. 잔액에 대해서 최대한 큰 단위를 적용해 나간다.

#현재 금액에서 각각의 동전을 뺐을 때 가장 적은 금액이 남는 경우를 반환하는 함수 입니다.
def min_calc(value, coin): # 처리해야할 돈, 사용할 동전단위
    a=[]
    for i in coin:
        a.append([value-i, i]) # 처리할 돈을 단위별로 뺀다. [처래할돈-단위, 단위]

    res = a[0] # 가장 작게 남은돈을 검색하기 위해 0번째를 기준으로 한다.
    for i in a: # 단위별 남은 돈에서 남은 돈을 추출
        if res[0] > i[0] and i[0] > 0: # 단위별 남은돈이 기준동보다 작고 0보다 크면
            res = i # 해당 남은 돈을 작게 남은돈으로 지정
    return res
    
coin = [1,50,100] # 동전 단위
value = [362, 0] # 대상 돈
dic = {} # 단위별 갯수 저장
for i in coin: # coin의 항목추출.1,50,100
    dic[i] = 0 # 동전 단위별 갯수를 0으로 초기화
    
while True:
    value = min_calc(value[0],coin) # 처리해야할 돈,사용할 단위  반환=단위별 필요한 갯수
    if value[0] < 0: # 남은돈이 0이하면 중단
        break
    else: # 남은 돈이 0보다 크면
        dic[value[1]] += 1 # 가장 작게 남은 동전의 단위에 1증가한다.

print(dic)

