동적 프로그래밍
큰 문제를 작은 문제로 나눠서 푸는 알고리즘으로 분할 정복법(Divide and Conquer)과 유사하다. 
해결된 문제의 답을 저장해두고 그것을 재활용하여 해결된 문제를 다시 푸는 비효율을 제거한다. 
공간복잡도를 늘리고 시간복잡도를 줄이는 방식이다.

DP는 다음 2가지 특성을 만족해야만 사용할 수 있다.
 최적 부분문제 구조(Optimal substructure)
 중복 부분문제 구조(Overlapping subproblems)
3단계 DP 적용 접근 방법
1. 최적해 구조의 특성을 파악하라
- 문제를 부분 문제로 나눈다.
2. 최적해의 값을 재귀적으로 정의하라
- 부분 문제의 최적해 값에 기반하여 문제의 최적해 값을 정의한다.
3. 상향식 방법으로 최적해의 값을 계산하라
- 가장 작은 부분 문제부터 해를 구한 뒤 테이블에 저장한다.
- 테이블에 저장되어 있는 부분 문제의 해를 이용하여 점차적으로 상위 부분 문제의
최적해를 구한다. (상향식 방법)
--------------------------
암기해야할 예제
--------------------------